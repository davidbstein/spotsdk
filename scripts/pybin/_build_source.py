import json
import hashlib

TEMPLATE = """ // {{ "id": {id}, "name": {name}, "deps": {deps} }}
/*
TODO: adding new dependencies not supported

DEPENDENCIES (name_used: file_referenced):
{depstree}

CALLERS (call_file: name_used):
{refstree}
*/

// This was autogenerated from a bundle.

{source}
"""

def derive_name(refs):
  name = "script"
  names = set()
  parents = set()
  for ref in refs.values():
    guess = ref.split('/')[-1].split('.')[0]
    try:
      parguess = ref.split('/')[-2]
    except:
      parguess = '.'
    if '.' not in parguess:
      parents.add(parguess)
    names.add(guess)
  if names:
    name = '-'.join(sorted(names))
  if len(parents) == 1:
    name = "{}_{}".format(list(parents)[0], name)
  return name

class FileList():
# id, source, deps, entry
  def __init__(self, path):
    with open(path) as f:
      file_list_raw = json.loads(f.read())
    self.file_list = {f['id']: f for f in file_list_raw}
    self._add_refs()
    self._name_files()
    self._modify_source()

  def _add_refs(self):
    for f_id, f in self.file_list.items():
      f['refs'] = {}
    for f_id, f in self.file_list.items():
      for dep_path, dep_id in f['deps'].items():
        self.file_list[dep_id]['refs'][f_id] = dep_path

  def _name_files(self):
    for f_id, f in self.file_list.items():
      name = derive_name(f['refs'])
      md5 = hashlib.md5()
      md5.update(f['source'].encode('utf-8', 'ignore'))
      hash = md5.hexdigest()[-5:]
      f['name'] = "{name}-{id}-{hash}.js".format(
        id=f_id, hash=hash, name=name
      )

  def _modify_source(self):
    for f_if, f in self.file_list.items():
      depstree = {
        f_name: self.file_list.get(f_id, {}).get('name', f_id)
        for f_name, f_id in f['deps'].items()
      }
      refstree = {
        self.file_list.get(f_id, {}).get('name', f_id): ref_name
        for f_id, ref_name in f['refs'].items()
      }
      f['source'] = TEMPLATE.format(
        source=f['source'],
        name=f['name'],
        id=f['id'],
        deps=json.dumps(f['deps'], indent=None),
        depstree=json.dumps(depstree, indent="  "),
        refstree=json.dumps(refstree, indent="  "),
      )

  def create_files(self, target_folder):
    for meta_f in self.file_list.values():
      with open("{}/{}".format(target_folder, meta_f['name']), 'a') as f:
        f.write(meta_f['source'])

if __name__ == '__main__':
  import sys
  fl = FileList(sys.argv[1])
  fl.create_files(sys.argv[2])